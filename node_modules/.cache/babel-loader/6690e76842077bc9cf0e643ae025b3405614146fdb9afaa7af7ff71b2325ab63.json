{"ast":null,"code":"const express = require('express');\nconst multer = require('multer');\nconst path = require('path');\nconst Property = require('../models/Property');\nconst router = express.Router();\n\n// Set up Multer for file uploads\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    console.log('Saving file to uploads folder...');\n    cb(null, 'uploads/'); // Save files to 'uploads' folder\n  },\n  filename: function (req, file, cb) {\n    const filename = Date.now() + path.extname(file.originalname);\n    console.log(`Generated filename for ${file.fieldname}: ${filename}`);\n    cb(null, filename); // Save with timestamp + extension\n  }\n});\nconst upload = multer({\n  storage\n});\n\n// Helper function to generate a unique 4-digit code\nconst generateUniqueCode = () => {\n  const code = Math.floor(1000 + Math.random() * 9000).toString(); // Generate 4-digit code\n  console.log(`Generated unique code: ${code}`);\n  return code;\n};\n\n// Add a new property with images\nrouter.post('/add-property', upload.fields([{\n  name: 'gateImage',\n  maxCount: 1\n}, {\n  name: 'interiorImage',\n  maxCount: 1\n}, {\n  name: 'kitchenImage',\n  maxCount: 1\n}]), async (req, res) => {\n  try {\n    console.log('Request body:', req.body); // Log the request body\n    console.log('Request files:', req.files); // Log the files uploaded\n\n    // Trim spaces from keys in the request body\n    const {\n      address,\n      deposit,\n      rent,\n      paymentDueDate\n    } = req.body;\n    if (!address || !deposit || !rent || !paymentDueDate) {\n      console.error('Validation error: Missing fields');\n      return res.status(400).json({\n        message: 'All fields are required'\n      });\n    }\n\n    // Generate a unique code for the property\n    const uniqueCode = generateUniqueCode();\n\n    // Log the received images\n    if (req.files) {\n      console.log('Gate Image:', req.files['gateImage'] ? req.files['gateImage'][0].path : 'No Gate Image');\n      console.log('Interior Image:', req.files['interiorImage'] ? req.files['interiorImage'][0].path : 'No Interior Image');\n      console.log('Kitchen Image:', req.files['kitchenImage'] ? req.files['kitchenImage'][0].path : 'No Kitchen Image');\n    }\n\n    // Save property details with image paths\n    const newProperty = new Property({\n      address,\n      deposit,\n      rent,\n      paymentDueDate,\n      uniqueCode,\n      gateImage: req.files['gateImage'] ? req.files['gateImage'][0].path : '',\n      interiorImage: req.files['interiorImage'] ? req.files['interiorImage'][0].path : '',\n      kitchenImage: req.files['kitchenImage'] ? req.files['kitchenImage'][0].path : ''\n    });\n    console.log('Saving new property to the database...');\n    await newProperty.save();\n    console.log('Property saved successfully:', newProperty);\n    res.status(200).json({\n      message: 'Property added successfully!',\n      property: newProperty,\n      uniqueCode\n    });\n  } catch (error) {\n    console.error('Error adding property:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","multer","path","Property","router","Router","storage","diskStorage","destination","req","file","cb","console","log","filename","Date","now","extname","originalname","fieldname","upload","generateUniqueCode","code","Math","floor","random","toString","post","fields","name","maxCount","res","body","files","address","deposit","rent","paymentDueDate","error","status","json","message","uniqueCode","newProperty","gateImage","interiorImage","kitchenImage","save","property","module","exports"],"sources":["C:/Users/Ankush/Desktop/myMernProject/frontend/src/AddProperty.js"],"sourcesContent":["const express = require('express');\r\nconst multer = require('multer');\r\nconst path = require('path');\r\nconst Property = require('../models/Property');\r\n\r\nconst router = express.Router();\r\n\r\n// Set up Multer for file uploads\r\nconst storage = multer.diskStorage({\r\n    destination: function (req, file, cb) {\r\n        console.log('Saving file to uploads folder...');\r\n        cb(null, 'uploads/'); // Save files to 'uploads' folder\r\n    },\r\n    filename: function (req, file, cb) {\r\n        const filename = Date.now() + path.extname(file.originalname);\r\n        console.log(`Generated filename for ${file.fieldname}: ${filename}`);\r\n        cb(null, filename); // Save with timestamp + extension\r\n    }\r\n});\r\nconst upload = multer({ storage });\r\n\r\n// Helper function to generate a unique 4-digit code\r\nconst generateUniqueCode = () => {\r\n    const code = Math.floor(1000 + Math.random() * 9000).toString(); // Generate 4-digit code\r\n    console.log(`Generated unique code: ${code}`);\r\n    return code;\r\n};\r\n\r\n// Add a new property with images\r\nrouter.post('/add-property', upload.fields([\r\n    { name: 'gateImage', maxCount: 1 },\r\n    { name: 'interiorImage', maxCount: 1 },\r\n    { name: 'kitchenImage', maxCount: 1 }\r\n]), async (req, res) => {\r\n    try {\r\n        console.log('Request body:', req.body); // Log the request body\r\n        console.log('Request files:', req.files); // Log the files uploaded\r\n\r\n        // Trim spaces from keys in the request body\r\n        const { address, deposit, rent, paymentDueDate } = req.body;\r\n\r\n        if (!address || !deposit || !rent || !paymentDueDate) {\r\n            console.error('Validation error: Missing fields');\r\n            return res.status(400).json({ message: 'All fields are required' });\r\n        }\r\n\r\n        // Generate a unique code for the property\r\n        const uniqueCode = generateUniqueCode();\r\n\r\n        // Log the received images\r\n        if (req.files) {\r\n            console.log('Gate Image:', req.files['gateImage'] ? req.files['gateImage'][0].path : 'No Gate Image');\r\n            console.log('Interior Image:', req.files['interiorImage'] ? req.files['interiorImage'][0].path : 'No Interior Image');\r\n            console.log('Kitchen Image:', req.files['kitchenImage'] ? req.files['kitchenImage'][0].path : 'No Kitchen Image');\r\n        }\r\n\r\n        // Save property details with image paths\r\n        const newProperty = new Property({\r\n            address,\r\n            deposit,\r\n            rent,\r\n            paymentDueDate,\r\n            uniqueCode,\r\n            gateImage: req.files['gateImage'] ? req.files['gateImage'][0].path : '',\r\n            interiorImage: req.files['interiorImage'] ? req.files['interiorImage'][0].path : '',\r\n            kitchenImage: req.files['kitchenImage'] ? req.files['kitchenImage'][0].path : ''\r\n        });\r\n\r\n        console.log('Saving new property to the database...');\r\n        await newProperty.save();\r\n        console.log('Property saved successfully:', newProperty);\r\n\r\n        res.status(200).json({\r\n            message: 'Property added successfully!',\r\n            property: newProperty,\r\n            uniqueCode\r\n        });\r\n    } catch (error) {\r\n        console.error('Error adding property:', error);\r\n        res.status(500).json({ message: 'Server error' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}