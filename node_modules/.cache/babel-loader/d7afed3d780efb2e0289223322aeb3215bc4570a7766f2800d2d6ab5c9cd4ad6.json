{"ast":null,"code":"const express = require('express');\nconst multer = require('multer');\nconst path = require('path');\nconst Property = require('../models/Property'); // Assuming you have a property schema\n\nconst router = express.Router();\n\n// Set up Multer for file uploads\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/'); // Save to 'uploads' folder\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + path.extname(file.originalname)); // Save with timestamp + extension\n  }\n});\nconst upload = multer({\n  storage\n});\n\n// Helper function to generate a unique 4-digit code\nconst generateUniqueCode = () => {\n  return Math.floor(1000 + Math.random() * 9000).toString(); // Generate 4-digit code\n};\n\n// Add a new property with images and other data\nrouter.post('/add-property', upload.fields([{\n  name: 'gateImage',\n  maxCount: 1\n}, {\n  name: 'interiorImage',\n  maxCount: 1\n}, {\n  name: 'kitchenImage',\n  maxCount: 1\n}]), async (req, res) => {\n  try {\n    // Parse form data\n    const {\n      address,\n      deposit,\n      rent,\n      paymentDueDate\n    } = req.body; // Address and other fields\n\n    if (!address || !deposit || !rent || !paymentDueDate) {\n      return res.status(400).json({\n        message: 'All fields are required'\n      });\n    }\n\n    // Generate a unique code for the property\n    const uniqueCode = generateUniqueCode();\n\n    // Save property details along with image paths\n    const newProperty = new Property({\n      address,\n      deposit,\n      rent,\n      paymentDueDate,\n      uniqueCode,\n      gateImage: req.files['gateImage'] ? req.files['gateImage'][0].path : '',\n      interiorImage: req.files['interiorImage'] ? req.files['interiorImage'][0].path : '',\n      kitchenImage: req.files['kitchenImage'] ? req.files['kitchenImage'][0].path : ''\n    });\n    await newProperty.save();\n    res.status(200).json({\n      message: 'Property added successfully!',\n      property: newProperty,\n      uniqueCode\n    });\n  } catch (error) {\n    console.error('Error adding property:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","multer","path","Property","router","Router","storage","diskStorage","destination","req","file","cb","filename","Date","now","extname","originalname","upload","generateUniqueCode","Math","floor","random","toString","post","fields","name","maxCount","res","address","deposit","rent","paymentDueDate","body","status","json","message","uniqueCode","newProperty","gateImage","files","interiorImage","kitchenImage","save","property","error","console","module","exports"],"sources":["C:/Users/Ankush/Desktop/myMernProject/frontend/src/AddProperty.js"],"sourcesContent":["const express = require('express');\r\nconst multer = require('multer');\r\nconst path = require('path');\r\nconst Property = require('../models/Property'); // Assuming you have a property schema\r\n\r\nconst router = express.Router();\r\n\r\n// Set up Multer for file uploads\r\nconst storage = multer.diskStorage({\r\n    destination: function (req, file, cb) {\r\n        cb(null, 'uploads/'); // Save to 'uploads' folder\r\n    },\r\n    filename: function (req, file, cb) {\r\n        cb(null, Date.now() + path.extname(file.originalname)); // Save with timestamp + extension\r\n    }\r\n});\r\n\r\nconst upload = multer({ storage });\r\n\r\n// Helper function to generate a unique 4-digit code\r\nconst generateUniqueCode = () => {\r\n    return Math.floor(1000 + Math.random() * 9000).toString(); // Generate 4-digit code\r\n};\r\n\r\n// Add a new property with images and other data\r\nrouter.post('/add-property', upload.fields([\r\n    { name: 'gateImage', maxCount: 1 },\r\n    { name: 'interiorImage', maxCount: 1 },\r\n    { name: 'kitchenImage', maxCount: 1 }\r\n]), async (req, res) => {\r\n    try {\r\n        // Parse form data\r\n        const { address, deposit, rent, paymentDueDate } = req.body; // Address and other fields\r\n\r\n        if (!address || !deposit || !rent || !paymentDueDate) {\r\n            return res.status(400).json({ message: 'All fields are required' });\r\n        }\r\n\r\n        // Generate a unique code for the property\r\n        const uniqueCode = generateUniqueCode();\r\n\r\n        // Save property details along with image paths\r\n        const newProperty = new Property({\r\n            address,\r\n            deposit,\r\n            rent,\r\n            paymentDueDate,\r\n            uniqueCode,\r\n            gateImage: req.files['gateImage'] ? req.files['gateImage'][0].path : '',\r\n            interiorImage: req.files['interiorImage'] ? req.files['interiorImage'][0].path : '',\r\n            kitchenImage: req.files['kitchenImage'] ? req.files['kitchenImage'][0].path : ''\r\n        });\r\n\r\n        await newProperty.save();\r\n\r\n        res.status(200).json({\r\n            message: 'Property added successfully!',\r\n            property: newProperty,\r\n            uniqueCode\r\n        });\r\n    } catch (error) {\r\n        console.error('Error adding property:', error);\r\n        res.status(500).json({ message: 'Server error' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}