{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ankush\\\\Desktop\\\\myMernProject\\\\frontend\\\\src\\\\LoginPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axiosInstance from './api/axios'; // Using axiosInstance for API requests\nimport { useNavigate } from 'react-router-dom';\nimport UserTypeSelection from './UserTypeSelection';\nimport LoginForm from './LoginForm';\nimport LoginSuccessMessage from './LoginSuccessMessage';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const [step, setStep] = useState(1); // Step 1: Select Tenant/Owner; Step 2: Show Login form\n  const [userType, setUserType] = useState(''); // Track user type (Tenant or Owner)\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [errors, setErrors] = useState({});\n  const [loading, setLoading] = useState(false); // Track loading state\n  const [showPassword, setShowPassword] = useState(false); // For \"Show Password\" toggle\n  const [loginSuccessMessage, setLoginSuccessMessage] = useState(''); // For showing success message\n  const navigate = useNavigate(); // For redirection\n\n  // Simple validation function for email and password\n  const validateInputs = () => {\n    let valid = true;\n    let newErrors = {};\n\n    // Validate email\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailPattern.test(formData.email)) {\n      newErrors.email = 'Email is not valid';\n      valid = false;\n    }\n\n    // Validate password\n    if (formData.password === '') {\n      newErrors.password = 'Password is required';\n      valid = false;\n    }\n    setErrors(newErrors);\n    return valid;\n  };\n\n  // Handle login request\n  const handleLogin = async () => {\n    if (validateInputs()) {\n      setLoading(true);\n      try {\n        // Send login request to backend using axiosInstance\n        const response = await axiosInstance.post('auth/login', {\n          email: formData.email,\n          password: formData.password,\n          userType: userType // Send the selected userType (tenant/owner)\n        });\n\n        // If login is successful, retrieve token and user data\n        const {\n          token,\n          user\n        } = response.data;\n\n        // Store token and user data in localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n\n        // Trigger storage event to update Navbar\n        window.dispatchEvent(new Event('storage'));\n\n        // Show success message\n        setLoginSuccessMessage('Login Successful!');\n        setLoading(false);\n\n        // Navigate to the appropriate dashboard based on userType after 2 seconds\n        setTimeout(() => {\n          if (user.userType === 'tenant') {\n            console.log(\"Navigating to tenant dashboard\");\n            navigate('/tenant-dashboard'); // Redirect tenant to tenant dashboard\n          } else if (user.userType === 'owner') {\n            console.log(\"Navigating to owner dashboard\");\n            navigate('/owner-dashboard'); // Redirect owner to owner dashboard\n          }\n        }, 2000); // Wait 2 seconds before redirect\n      } catch (error) {\n        var _error$response, _error$response$data, _error$response2, _error$response2$data;\n        setLoading(false);\n        console.error('Login error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.msg) || 'Login failed');\n        setErrors({\n          email: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.msg) || 'Invalid email or password'\n        }); // Show error message\n      }\n    }\n  };\n\n  // Handle input change\n  const handleInputChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // Handle user type selection\n  const handleUserTypeSelection = type => {\n    setUserType(type);\n    setStep(2); // Move to the login form after selection\n  };\n\n  // Handle Back button to go back to user type selection\n  const handleBack = () => {\n    setStep(1); // Go back to tenant/owner selection\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-100 py-10 min-h-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto px-6\",\n      children: step === 1 ? /*#__PURE__*/_jsxDEV(UserTypeSelection, {\n        handleUserTypeSelection: handleUserTypeSelection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [loginSuccessMessage && /*#__PURE__*/_jsxDEV(LoginSuccessMessage, {\n          message: loginSuccessMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(LoginForm, {\n          formData: formData,\n          handleInputChange: handleInputChange,\n          handleLogin: handleLogin,\n          handleBack: handleBack,\n          errors: errors,\n          loading: loading,\n          showPassword: showPassword,\n          setShowPassword: setShowPassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"IVIBfOwllBq2QFXOziBLhZ8yDAI=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","axiosInstance","useNavigate","UserTypeSelection","LoginForm","LoginSuccessMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginPage","_s","step","setStep","userType","setUserType","formData","setFormData","email","password","errors","setErrors","loading","setLoading","showPassword","setShowPassword","loginSuccessMessage","setLoginSuccessMessage","navigate","validateInputs","valid","newErrors","emailPattern","test","handleLogin","response","post","token","user","data","localStorage","setItem","JSON","stringify","window","dispatchEvent","Event","setTimeout","console","log","error","_error$response","_error$response$data","_error$response2","_error$response2$data","msg","handleInputChange","e","target","name","value","handleUserTypeSelection","type","handleBack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","_c","$RefreshReg$"],"sources":["C:/Users/Ankush/Desktop/myMernProject/frontend/src/LoginPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axiosInstance from './api/axios'; // Using axiosInstance for API requests\r\nimport { useNavigate } from 'react-router-dom';\r\nimport UserTypeSelection from './UserTypeSelection';\r\nimport LoginForm from './LoginForm';\r\nimport LoginSuccessMessage from './LoginSuccessMessage';\r\n\r\nconst LoginPage = () => {\r\n  const [step, setStep] = useState(1); // Step 1: Select Tenant/Owner; Step 2: Show Login form\r\n  const [userType, setUserType] = useState(''); // Track user type (Tenant or Owner)\r\n  const [formData, setFormData] = useState({\r\n    email: '',\r\n    password: ''\r\n  });\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [loading, setLoading] = useState(false); // Track loading state\r\n  const [showPassword, setShowPassword] = useState(false); // For \"Show Password\" toggle\r\n  const [loginSuccessMessage, setLoginSuccessMessage] = useState(''); // For showing success message\r\n  const navigate = useNavigate(); // For redirection\r\n\r\n  // Simple validation function for email and password\r\n  const validateInputs = () => {\r\n    let valid = true;\r\n    let newErrors = {};\r\n\r\n    // Validate email\r\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailPattern.test(formData.email)) {\r\n      newErrors.email = 'Email is not valid';\r\n      valid = false;\r\n    }\r\n\r\n    // Validate password\r\n    if (formData.password === '') {\r\n      newErrors.password = 'Password is required';\r\n      valid = false;\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return valid;\r\n  };\r\n\r\n  // Handle login request\r\n  const handleLogin = async () => {\r\n    if (validateInputs()) {\r\n      setLoading(true);\r\n      try {\r\n        // Send login request to backend using axiosInstance\r\n        const response = await axiosInstance.post('auth/login', {\r\n          email: formData.email,\r\n          password: formData.password,\r\n          userType: userType, // Send the selected userType (tenant/owner)\r\n        });\r\n\r\n        // If login is successful, retrieve token and user data\r\n        const { token, user } = response.data;\r\n\r\n        // Store token and user data in localStorage\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n\r\n        // Trigger storage event to update Navbar\r\n        window.dispatchEvent(new Event('storage'));\r\n\r\n        // Show success message\r\n        setLoginSuccessMessage('Login Successful!');\r\n        setLoading(false);\r\n\r\n        // Navigate to the appropriate dashboard based on userType after 2 seconds\r\n        setTimeout(() => {\r\n          if (user.userType === 'tenant') {\r\n            console.log(\"Navigating to tenant dashboard\");\r\n            navigate('/tenant-dashboard'); // Redirect tenant to tenant dashboard\r\n          } else if (user.userType === 'owner') {\r\n            console.log(\"Navigating to owner dashboard\");\r\n            navigate('/owner-dashboard'); // Redirect owner to owner dashboard\r\n          }\r\n        }, 2000); // Wait 2 seconds before redirect\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error('Login error:', error.response?.data?.msg || 'Login failed');\r\n        setErrors({ email: error.response?.data?.msg || 'Invalid email or password' }); // Show error message\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle input change\r\n  const handleInputChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // Handle user type selection\r\n  const handleUserTypeSelection = (type) => {\r\n    setUserType(type);\r\n    setStep(2); // Move to the login form after selection\r\n  };\r\n\r\n  // Handle Back button to go back to user type selection\r\n  const handleBack = () => {\r\n    setStep(1); // Go back to tenant/owner selection\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-gray-100 py-10 min-h-screen\">\r\n      <div className=\"max-w-3xl mx-auto px-6\">\r\n        {step === 1 ? (\r\n          <UserTypeSelection handleUserTypeSelection={handleUserTypeSelection} />\r\n        ) : (\r\n          <>\r\n            {loginSuccessMessage && <LoginSuccessMessage message={loginSuccessMessage} />}\r\n            <LoginForm\r\n              formData={formData}\r\n              handleInputChange={handleInputChange}\r\n              handleLogin={handleLogin}\r\n              handleBack={handleBack}\r\n              errors={errors}\r\n              loading={loading}\r\n              showPassword={showPassword}\r\n              setShowPassword={setShowPassword}\r\n            />\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}